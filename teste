apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sc-nfs-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: nfs-teste
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1 
kind: Deployment
metadata:
  labels:
    app: sc-nginx
  name: sc-nfs-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sc-nginx
  template:
    metadata:
      labels:
        app: sc-nginx
    spec:
      volumes:
      - name: nfs-test
        persistentVolumeClaim:
          claimName: sc-nfs-pvc
      containers:
      - image: nginx
        name: nginx
        volumeMounts:
        - name: nfs-test # template.spec.volumes[].name
          mountPath: /usr/share/nginx/html # mount inside of container
          #readOnly: true # if enforcing read-only on volume
# 
#❯ kubectl get pods -l=app=sc-nginx
#NAME                          READY   STATUS    RESTARTS   AGE
#sc-nfs-nginx-97f9d96f-g5b6v   1/1     Running   0          119s
#❯ kubectl exec -it sc-nfs-nginx-97f9d96f-g5b6v  -- sh -c "echo \"<h1>hello world</h1>\" > /usr/share/nginx/html/hello.html"
#❯ kubectl exec -it sc-nfs-nginx-97f9d96f-g5b6v -- curl http://localhost:80/hello.html
#> export KUBECONFIG=/home/jose/.kube/qa_config ; 
# https://fabianlee.org/2022/01/12/kubernetes-nfs-mount-using-dynamic-volume-and-storage-class/

#kubectl -n cadastro get pods -l=app=sc-nginx

#  Alterando a relaimpolicy - para retain o status muda para "released" e quando alterado para delete ele some, mas em ambos os casos o diretório não some do servidor. 
# Para recuperar eu apenas recriei o pod. 

#https://docs.redpanda.com/current/manage/kubernetes/storage/k-delete-persistentvolume/