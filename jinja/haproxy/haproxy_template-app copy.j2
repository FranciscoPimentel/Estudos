global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

{# Início da configs Load Balancer Haproxy #}
frontend default
  bind :443 ssl crt /etc/ssl/private/tcp.com.br.pem

{# Inícios das ACLs #}
# ACL An Access Control Lis (Redis,RabbitMQ e Consul)
{% if 'consul' in groups %}
# ACL CONSUL 
  acl is_consul_{{ environment_name }} hdr(host) -i {{ vars.domain_consul }} 
  {%- for host in groups['consul'] -%}
  {{ hostvars[host]['ansible_hostname'] }}
  {%- endfor -%}
  use_backend consul_{{ environment_name }} if is_consul_{{ environment_name }}
{% endif %} 


# ACL RABBITMQ
{% if 'rabbitmq' in groups %}
  acl is_rabbitmq_{{ environment_name }} hdr(host) -i {{ domain_rabbitmq }} {%- for host in groups['rabbitmq'] -%}
  {{ hostvars[host]['ansible_hostname'] }}
  {%- endfor -%}
  use_backend rabbitmq_{{ environment_name }} if is_rabbitmq_{{ environment_name }}
{% endif %} 

# ACL REDIS
{% if 'redis' in groups %}
  acl is_redis_{{ environment_name }} hdr(host) -i {{ domain_redis }} {%- for host in groups['redis'] -%}
  {{ hostvars[host]['ansible_hostname'] }}
  {%- endfor -%}
  use_backend redis_{{ environment_name }} if is_redis_{{ environment_name }}
{% endif %} 

{% if 'redis' in groups %}
backend redis_{{ environment_name }}
   maxconn         512
   fullconn        512
   timeout client  15s
   timeout server  15s
   balance roundrobin
   option tcp-smart-accept
   option tcp-smart-connect
   option tcpka
   option tcplog
   option tcp-check
   tcp-check send AUTH\ {{ PASSWORD_REDIS }}\r\n 
   tcp-check send PING\r\n
   tcp-check expect string +PONG
   tcp-check send info\ replication\r\n
   tcp-check expect string role:master
   tcp-check send QUIT\r\n
   tcp-check expect string +OK
{% for host in groups['redis'] %}
   server {{ host }} {{ hostvars[host]['ansible_host'] }}:{{ port_redis }} check inter 4s
{% endfor %}
#=>   server redis-qa-1 10.41.12.206:7000 check inter 4s
#=>   server redis-qa-2 10.41.12.207:7000 check inter 4s
#=>   server redis-qa-3 10.41.12.208:7000 check inter 4s
{% endif %} 

{% if 'consul' in groups %}
backend consul_{{ environment_name }}
   balance roundrobin
{% for host in groups['consul'] %}
   server {{ host }} {{ hostvars[host]['ansible_host'] }}:443 check inter 5s rise 2 fall 3
{% endfor %}

#=>   server consul-1 10.41.13.212:8500 check inter 5s rise 2 fall 3
#=>   server consul-2 10.41.13.213:8500 check inter 5s rise 2 fall 3
#=>   server consul-3 10.41.13.214:8500 check inter 5s rise 2 fall 3

backend rabbitmq_qa
   maxconn 10000
   timeout connect 5s
   timeout client 100s
   timeout server 100s
   balance roundrobin
{% for host in groups['rabbitmq'] %}
   server {{ host }} {{ hostvars[host]['ansible_host'] }}:{{ port_rabbitmq_http  }} check 
{% endfor %}   
{% endif %} 

#=>   server rabbitmqqa1 10.41.12.132:15672 check inter 5s rise 2 fall 3
#=>   server rabbitmqqa2 10.41.12.133:15672 check inter 5s rise 2 fall 3
#=>   server rabbitmqqa3 10.41.12.134:15672 check inter 5s rise 2 fall 3

{# Configs por lista, devido ao uso de uma porta diferente das 443 #}
# Configs RabbitMQ port interna 

listen rabbitmq 
   bind *:5672
   mode tcp
   maxconn 10000
   timeout connect 5s
   timeout client 100s
   timeout server 100s
   balance roundrobin
{% for host in groups['rabbitmq'] %}
   server {{ host }} {{ hostvars[host]['ansible_host'] }}:{{ port_rabbitmq }} check inter 5s rise 2 fall 3
{% endfor %}

#=>   server rabbitmqqa1 10.41.12.132:5672 check inter 5s rise 2 fall 3
#=>   server rabbitmqqa2 10.41.12.133:5672 check inter 5s rise 2 fall 3
#=>   server rabbitmqqa3 10.41.12.134:5672 check inter 5s rise 2 fall 3

{# Status dos services que Haproxy está como load balancer #}
# Status Haproxy Balanceador 
listen stats
    bind *:1936 ssl crt /etc/ssl/private/tcp.com.br.pem
    mode http
    stats enable
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /
    stats auth admin:password
    stats refresh 10s