global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

# Status Haproxy Balanceador 
listen stats
    bind *:{{ port_stats_haproxy }} ssl crt /etc/ssl/private/tcp.com.br.pem
    mode http
    stats enable
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /
    stats auth admin:password
    stats refresh 10s

{# Configuração do RabbiMQ #}
{% if 'rabbitmq' in groups %}
# Configs rabbitmq

listen rabbitmq
   bind *:{{ port_rabbitmq }}
   mode tcp
   maxconn 10000
   timeout connect 5s
   timeout client 100s
   timeout server 100s
   balance roundrobin

{% for host in groups['rabbitmq'] %}
   server {{ host }} {{ hostvars[host]['ansible_host'] }}:{{ port_rabbitmq }} check inter 5s rise 2 fall 3
{% endfor %}

# optional, for proxying management site

   frontend front_rabbitmq_management
   bind *:{{ port_rabbitmq_http }} ssl crt /etc/ssl/private/tcp.com.br.pem
   default_backend back_rabbitmq_management
   backend back_rabbitmq_management
   balance source
{% for host in groups['rabbitmq'] %}
   server {{ host }} {{ hostvars[host]['ansible_host'] }}:{{ port_rabbitmq_http  }} check 
{% endfor %}   
{% endif %} 

{# Conifguração do Redis #}
{% if 'redis' in groups %}
# Config Redis
listen Redis_Masters
   bind            *:{{ port_redis }}
   mode            tcp
   maxconn         512
   fullconn        512
   timeout client  15s
   timeout server  15s
   balance roundrobin
   option tcp-smart-accept
   option tcp-smart-connect
   option tcpka
   option tcplog
   option tcp-check
   tcp-check send AUTH\ \r\n
   tcp-check send PING\r\n
   tcp-check expect string +PONG
   tcp-check send info\ replication\r\n
   tcp-check expect string role:master
   tcp-check send QUIT\r\n
   tcp-check expect string +OK
{% for host in groups['redis'] %}
   server {{ host }} {{ hostvars[host]['ansible_host'] }}:{{ 
      
    }} check inter 4s
{% endfor %}
{% endif %}
{# Conifguração do Consul #}
# Configs Load Balance Consul 
listen consul
   bind *:443 ssl crt /etc/ssl/private/tcp.com.br.pem
   mode tcp
   maxconn 10000
   timeout connect 5s
   timeout client 1m
   timeout server 1m
   balance roundrobin
   {% for host in groups['consul'] %}
server {{ host }} {{ hostvars[host]['ansible_host'] }}:443 check inter 5s rise 2 fall 3
   {% endfor %}